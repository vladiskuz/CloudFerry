#==============================================================================
# General migration process options
#==============================================================================
[DEFAULT]
debug = False
log_config_append = configs/logging_config.ini

[migrate]

# Path to scenario file to be used for migration. 'scenario/migrate.yaml' by
# default
scenario = scenario/migrate.yaml

# Path to tasks mapping file. 'scenario/tasks.yaml' by default
tasks_mapping = scenario/tasks.yaml

# Enable or Disable capability to keep  user passwords value from keystone.
# Default value is False.
# Values:
#   False - new passwords will be generated for users after migration.
#   True - same passwords will be after migration(scenario needs testing)
keep_user_passwords = False

# Selected range of ports for ssh transfer.
ssh_transfer_port = 9990-9999

# Path for ssh private key file e.g. ~/.ssh/id_rsa. Used for both Clouds.
key_filename = <path to ssh private key>

# Preserve private IPs for instances migrated on destination cloud same as in
# source cloud.
keep_ip = yes

ext_net_map = configs/ext_net_map.yaml

# Keep same Floating IPs for instances migrated on destination cloud as in
# source cloud.
# Values:
#  True - to keep floating IPs. In that case after migration floating IPs will
#         be transferred to the DST.
#  False - new IPs will be attached on the DST if customer provides different
#          external ip pool.
keep_floatingip = yes

# Change router external ip on dst cloud to avoid ip collision
# by making additional floatingip on dst as stub
change_router_ips = True

# Delete floating ip stub on dst after router migration
# Can be used with change_router_ips
clean_router_ips_stub = True

# tenant for creation router ip stubs
# "None" value (as default) makes stub creations in router tenant
router_ips_stub_tenant = service

# Migrate cinder volumes information, including volume IDs, metadata and etc.
keep_volume_storage = False

# Speed limit for glance to glance transfer.
# Values: [off|Nb|Nkb|Nmb|Ngb], where:
# off - Speed limit is disabled (Default value)
# N - int value (f.e. 1, 100, 1024 etc.)
# b/kb/mb/gb - a multiple of the unit byte for glance image info transfer
speed_limit = off

# Method of file compression during ssh transfer: "gzip" compressed or "dd"
# with no compression.
file_compression = gzip

# Used to set compression on SSH, the higher the level (1-9) the higher the
# compression rate.
level_compression = 9

# Overwrite password for existing users on destination Cloud.
# Values:
# True - overwrite password for existing user and send them notification.
# False - do not overwrite password.
# IMPORTANT: currently functions incorrectly!
overwrite_user_passwords = False

# Enable or disable tenant quotas Migration.
migrate_quotas = False

# Enable or disable tenant quotas Migration.
migrate_users = True

# Direct data transmission between (src and dst) compute nodes via ssh tunnel.
# Values:
#  yes - Used when network connectivity between src and dst compute nodes
#        exist.
#  no - Used when no connectivity b/n computes, then connection via external
#       network.
direct_compute_transfer = True

# CloudFerry tool provides filtering per-tenant, per-instance, per-image.
# This filter will allow to migrate specified tenants, instances, images only.
# Resources not specified in filter will be migrated by default(all for all
# tenants).
# See `configs/filter.yaml` for more
filter_path = configs/filter.yaml

# Migrate or not migrate lbaas settings for Neutron.
# By lbaas settings means: pools, members, health monitors, VIPs and their
# relationships.
keep_lbaas = no

# Size of one chunk to transfer via SSH in Mb.
ssh_chunk_size = 100

# Number x API retries.
# Note: High number may considerably slow down migration process, but ensures
# retry.
retry = 5

# Migrate or not migrate external networks for Neutron.
migrate_extnets = True

# Time in seconds between Openstack API retries.
# Note: High number may considerably slow down migration process.
time_wait = 5

# Path to class that will perform cinder migration actions.
# Possible values:
#   - `cloudferrylib.os.storage.cinder_storage.CinderStorage`:
#      copies cinder volumes from source to destination
#   - `cloudferrylib.os.storage.cinder_database.CinderStorage`:
#      Used with NFS backend. Does not copy volumes, only updates cinder DB on
#      destination cloud, expects NFS storage is shared between clouds.
cinder_migration_strategy = cloudferrylib.os.storage.cinder_storage.CinderStorage

# Configuration file to be used for grouping instances based on user-defined
# criteria.
group_file_path = configs/grouping_result.yaml

# Migrate user quotas. If it set in "false" only tenant quotas will be migrated.
# Use this in case when OpenStack does not support user quotas (e.g. Grizzly)
migrate_user_quotas = False

# Backend used for doing live migration inside a cloud. Used by evacuation chain.
# "nova" by default. Other possible option - "cobalt". Raises error in case
# set to any other value.
incloud_live_migration = nova

# Path to YAML file which holds relationships between code and actions defined
# in `path_scenario`
path_tasks = scenario/tasks.yaml

# Migration scenario to be used
# Sample scenarios:
#   - `scenario/cold_migrate.yaml`: cold migration scenario
#   - `scenario/live_migrate.yaml`: live migration scenario
#   - `scenario/migrate_resources.yaml`: scenario which only migrates resources
#   - `scenario/migrate_vms.yaml`: scenario which only migrates VMs, assumes
#     resources were migrated using `scenario/migrate_resources.yaml` scenario
path_scenario = scenario/migrate.yaml

# Allows to specify host for creating MySQL dump used in rollback procedure.
# Useful when MySQL uses multinode configuration with load balancer in front.
# In this case one would set VIP hostname in `[dst] db_host` and specific
# SSH-accessible MySQL node behind VIP for creating MySQL dump used in
# rollback.
mysqldump_host = <specific MySQL DB hostname or IP address, not VIP>

# Uses low-level DB requests if set to True, may be incompatible with more
# recent versions of Keystone. Tested on grizzly, icehouse and juno. True by
# default
optimize_user_role_fetch = [True|False]

# Number of times CloudFerry will attempt to connect when connecting to a new
# server via SSH.
ssh_connection_attempts = 3

# Ignore images with size 0 and exclude them from migration process
ignore_empty_images = False

# Don't show ssl warnings
hide_ssl_warnings = True

# Keep affinity/anti-affinity settings (Nova server-groups migration).
# Values:
# True - enabled
# False - disabled (by default)
keep_affinity_settings = True

# Timeout booting of instance
boot_timeout = 300

# Specify SSH cipher to use while copying ephemeral disks, etc...
ssh_cipher = arcfour128

#==============================================================================
# Mailing configuration
# CF allows sending email notifications to the interested parties
# Functionality is currently NOT TESTED
#==============================================================================
[mail]
server = <server_name:port_number>
username = <username>
password = <password>
from_addr = <e-mail address>


#==============================================================================
# Source cloud configuration
#==============================================================================
[src]

# Currently only supported value "os" - OpenStack. Future release may include
# other Clouds. Reserved for future.
type = os

# Keystone's address on service endpoint for authorization purposes (External
# IP)
# `keystone endpoint-list | grep 35357`
auth_url = <src_auth_url>

# Public (external) IP of Controller used for API interaction.
host = <src_api_host>

# Public (external) IP of cloud node used for ssh communication (usually
# Controller node).
ssh_host = <src_ssh_host>

# User to connect via ssh
ssh_user = <src_ssh_user>

# Sudo password to connect via ssh on compute nodes, and run commands with
# root privileges.
ssh_sudo_password = <src_ssh_sudo_password>

# External network CIDR of source Clouds compute nodes. You can specify several
# CIDRs using comma as delimiter, for example:
# ext_cidr = 8.8.0.0/16,4.4.0.0/16
# TODO: consider using bridge name instead
ext_cidr = <src_external_net_cidr>

# Openstack admin user which belongs to admin tenant for access to API.
user = admin

# Password of OpenStack admin user for access to API.
password = admin

# Password of OpenStack admin user for access to API.
tenant = admin

# Region name for Openstack services. `None` by default
region = myregion

# "service_tenant" is the name for Tenant used by openstack services.
# By default CloudFerry takes following value for service tenant name:
# "service". In some cases (e.g Mirantis Openstack) the service tenant name
# can be different. To verify if value is different from default run:
# `keystone tenant-list | grep service`
service_tenant = service

# SSL sertificate file for establish connection to secure OpenStack services
cacert = <sertificate_file>

# Allow to access servers without checking SSL certs
insecure = False


#==============================================================================
# Source cloud MySQL configuration
#==============================================================================
[src_mysql]

# MySQL DB user with write permissions
db_user = root

# Root Password for mysql
# For mysql: grep "password" /etc/mysql/my.cnf.
# For Galera: grep "bind" /etc/mysql/conf.d/wsrep.cnf
db_password = top_secret_password

# Hostname or IP address of MySQL server
# For mysql: grep "bind" /etc/mysql/my.cnf.
# For Galera: grep "bind" /etc/mysql/conf.d/password.cnf
# Or can be checked in any of the services config files:
# `cat /etc/nova/nova.conf | grep mysql`
db_host = <src_mysql_host>

# Port for mysql connection
db_port = 3306

# Driver for connection
db_connection = mysql+mysqlconnector


#==============================================================================
# Source cloud RabbitMQ configuration
#==============================================================================
[src_rabbit]

# User for RabbitMQ.
# On Controller node:
# `cat /etc/nova/nova.conf | grep rabbit_user`
user = <rabbit_user>

# Password for RabbitMQ user.
# On Controller node:
# `cat /etc/nova/nova.conf | grep rabbit_pas`
password = <rabbit_password>

# RabbitMQ host or comma separated RabbitMQ hosts in case Cluster solution.
# To find IPs of Rabbit: `cat /etc/nova/nova.conf | grep rabbit_hosts`
hosts = <rabbit_hosts>


#==============================================================================
# Source cloud compute service (nova) configuration
#==============================================================================
[src_compute]

# Name of the OpenStack compute service. Reserved for future.
service = nova

# Backend for ephemeral drives.
# Values:
#  ceph - if backed for ephemeral disk is Ceph.
#  iscsi - if backed for ephemeral disk is local storage.
backend = iscsi

# In case Ceph used as backend for ephemerals: provide IP of server hosting
# ephemeral drives.
host_eph_drv = <src_host_epehem_drv>

# Live migration type. Passed directly to `nova live-migration` command.
block_migration = True

# Used for live-migration allow disk overcommit. Passed directly to
# `nova live-migration` command.
disk_overcommit = False

# Driver for DB connection
db_connection = mysql+mysqlconnector

# Compute mysql node ip address. Usually controller node.
# `cat /etc/nova/nova.conf | grep mysql`
db_host = <nova_db_host>

# Port for MySQL connection
db_port = 3306

# Compute service DB name. `nova` by default.
# `cat /etc/nova/nova.conf | grep connection`
db_name = nova

# Database user for the Compute service.
# `cat /etc/nova/nova.conf | grep connection`
db_user = <nova_db_user>

# Database user password for the Compute service.
# `cat /etc/nova/nova.conf | grep connection`
db_password = <nova_db_password>


#==============================================================================
# Source cloud storage service (cinder) configuration
#==============================================================================
[src_storage]

# Name service for storage. Reserved for future
service = cinder

# Backend for storage
# Values:
#  ceph - if backed is Ceph
#  iscsi - if backed is iscs
backend = ceph

# Cinder mysql node ip address.
# `cat /etc/cinder/cinder.conf | grep mysql`
db_host = <src_ceph_storage_host>

# Port for mysql connection.
# `cat /etc/cinder/cinder.conf | grep mysql`
db_port = 3306

# Driver for DB connection
db_connection = mysql+mysqlconnector

# Database user for the Cinder service.
# `cat /etc/cinder/cinder.conf | grep mysql`
db_user = <cinder_database_username>

# Database user password for the Cinder service. Usually controller node.
# To get the password value: `cat /etc/cinder/cinder.conf | grep mysql`
db_password = <cinder_database_password>

# Compute service database name.
# `cat /etc/cinder/cinder.conf | grep mysql`
db_name = <cinder_database_name>

# Mode for transporting volumes.
# Values:
#  GLANCE - default
#  SSH
protocol_transfer = SSH

# Format for converting volumes.
# Values:
# qcow2 - default
disk_format = qcow2

# Ceph
# volume_name_template=volume-
# rbd_pool=volumes

#==============================================================================
# Source cloud image service (glance) configuration
#==============================================================================
[src_image]

# Name service for image based storage
service = glance

# Backend for images
# Values:
# swift -
# file - default
backend = swift

# Glance DB configuration
db_host = <glance_db_host>
db_port = 3306
db_connection = mysql+mysqlconnector

# Database user for Glance service.
# `cat /etc/glance/glance-api.conf | grep mysql`
db_user = <glance_db_user>

# Database user password for the Glance service.
# To get value run: #`cat /etc/glance/glance-api.conf | grep mysql`
db_password = <glance_db_password>

# Glance service database name. 
# To get value run: #`cat /etc/glance/glance-api.conf | grep mysql`
db_name = glance


#==============================================================================
# Source cloud identity service (keystone) configuration
#==============================================================================
[src_identity]

# Service name for Identity service.
service = keystone

# Keystone DB configuration options. If not set uses `[src_mysql]` values
db_name = keystone
db_user = <keystone_db_user>
db_password = <keystone_db_password>
db_host = <keystone_db_host>
db_port = 3306
db_connection = mysql+mysqlconnector


#==============================================================================
# Source cloud networking service (quantum/neutron) configuration
#==============================================================================
[src_network]
# Name service for network. Value: "auto" which detects available service.
service = auto

# neutron DB configuration options. If not set uses `[src_mysql]` values
# Driver for DB connection
db_connection = mysql+mysqlconnector

# IP address of Network service's DB node. # cat /etc/neutron/neutron.conf | grep mysql
db_host = <neutron_db_host>

# Port for DB connection. # cat /etc/neutron/neutron.conf | grep mysql
db_port = 3306

# Network service's database name. # cat /etc/neutron/neutron.conf | grep mysql
db_name = neutron

# Database user for the Network service. # cat /etc/neutron/neutron.conf | grep mysql
db_user = <neutron_db_user>

# Database user's password for the Network service. # cat /etc/neutron/neutron.conf | grep mysql
db_password = <neutron_db_password>

# Get all Neutron network quotas.
# Default value is False.
# Values:
#   False - Get only custom Neutron quotas;
#   True - Get all Neutron quotas (default and custom)
get_all_quota = False


#==============================================================================
# Source cloud object storage service (swift) configuration
#==============================================================================
[src_objstorage]

# Service name for object storage.
service = swift


#==============================================================================
# Destination cloud configuration options. See [src] for description of each
# config option
#==============================================================================
[dst]
type = os
auth_url = <src_auth_url>
host = <dst_api_host>
ssh_host = <dst_ssh_host>
ssh_user = <dst_ssh_user>
ssh_sudo_password = <dst_ssh_sudo_password>
# TODO: consider using bridge name instead
ext_cidr = <dst_external_net_cidr>
user = admin
password = admin
tenant = admin
region = myregion
temp = /root/merge
service_tenant = service
cacert = <sertificate_file>
insecure = False


[dst_mysql]
db_user = root
db_password =
db_host = <dst_mysql_host>
db_port = 3306
db_connection = mysql+mysqlconnector


[dst_rabbit]
user = <rabbit_user>
password = <rabbit_password>
hosts = <rabbit_hosts>


[dst_compute]
service = nova
backend = iscsi
host_eph_drv = <dst_host_epehem_drv>
cpu_allocation_ratio = 16
ram_allocation_ratio = 1
disk_allocation_ratio = 0.9
block_migration = True
disk_overcommit = False
db_connection = mysql+mysqlconnector
db_host = <nova_db_host>
db_port = 3306
db_name = nova
db_user = <nova_db_user>
db_password = <nova_db_password>


[dst_storage]
service = cinder
backend = ceph
db_host = <dst_ceph_storage_host>
db_port = 3306
db_connection = mysql+mysqlconnector
db_user = <cinder_database_username>
db_password = <cinder_database_password>
db_name = <cinder_database_name>
# Ceph
# volume_name_template=volume-
# rbd_pool=volumes


[dst_image]
service = glance
convert_to_raw = False
backend = swift
db_host = <glance_db_host>
db_port = 3306
db_connection = mysql+mysqlconnector
db_user = <glance_db_user>
db_password = <glance_db_password>
db_name = glance


[dst_identity]
service = keystone


[dst_network]
service = auto
db_connection = mysql+mysqlconnector
db_host = <neutron_db_host>
db_port = 3306
db_name = neutron
db_user = <neutron_db_user>
db_password = <neutron_db_password>
get_all_quota = False


[dst_objstorage]
service = swift


[import_rules]
key = {name:dest-key-1}


[snapshot]

#Default path "dump.sql". Which will create a backup inside Cloudferry directory.
snapshot_path = dump.sql


[initial_check]
claimed_bandwidth = 100
factor = 0.5
test_file_size = 1024


[condense]
group_file=


[database]

#Redis database host location. Usually same as Cloudferry installed or separate Redis DB.
host = localhost

#Redis database port number.
port = 6379

[evacuation]
# Home directory of user under which nova services are running
nova_home_path = /var/lib/nova
# Name of user under which nova services are running
nova_user = nova
# For how much seconds to wait for VM state change during evacuation
state_change_timeout = 120
# For how much seconds to wait for VM to migrate during evacuation
migration_timeout = 600
